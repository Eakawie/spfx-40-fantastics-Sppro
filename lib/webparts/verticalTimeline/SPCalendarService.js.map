{"version":3,"sources":["webparts/verticalTimeline/SPCalendarService.ts"],"names":[],"mappings":"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","file":"webparts/verticalTimeline/SPCalendarService.js","sourcesContent":["/**\r\n * @file\r\n * Service to get list & list items from current SharePoint site\r\n *\r\n * Author: Olivier Carpentier\r\n */\r\nimport { ISPListItems, ISPListItem } from './ISPList';\r\nimport { IWebPartContext } from '@microsoft/sp-webpart-base';\r\nimport { IVerticalTimelineWebPartProps } from './IVerticalTimelineWebPartProps';\r\nimport { Environment, EnvironmentType } from '@microsoft/sp-core-library';\r\nimport { SPHttpClient, SPHttpClientResponse } from '@microsoft/sp-http';\r\n\r\nimport MockHttpClient from './MockHttpClient';\r\n\r\n/**\r\n * @interface\r\n * Service interface definition\r\n */\r\nexport interface ISPCalendarService {\r\n  /**\r\n   * @function\r\n   * Gets the pictures from a SharePoint list\r\n   */\r\n  getItems(libId: string): Promise<ISPListItems>;\r\n}\r\n\r\n/**\r\n * @class\r\n * Service implementation to get list & list items from current SharePoint site\r\n */\r\nexport class SPCalendarService implements ISPCalendarService {\r\n  private context: IWebPartContext;\r\n  private props: IVerticalTimelineWebPartProps;\r\n\r\n  /**\r\n   * @function\r\n   * Service constructor\r\n   */\r\n  constructor(_props: IVerticalTimelineWebPartProps, pageContext: IWebPartContext){\r\n      this.props = _props;\r\n      this.context = pageContext;\r\n  }\r\n\r\n\r\n  /**\r\n   * @function\r\n   * Gets the pictures from a SharePoint list\r\n   */\r\n  public getItems(queryUrl: string): Promise<ISPListItems> {\r\n    if (Environment.type === EnvironmentType.Local) {\r\n      //If the running environment is local, load the data from the mock\r\n      return this.getItemsFromMock('1');\r\n    }\r\n    else {\r\n      //Request the SharePoint web service\r\n      return this.context.spHttpClient.get(queryUrl, SPHttpClient.configurations.v1).then((response: SPHttpClientResponse) => {\r\n          return response.json().then((responseFormated: any) => {\r\n              var formatedResponse: ISPListItems = { value: []};\r\n              //Fetchs the Json response to construct the final items list\r\n              responseFormated.value.map((object: any, i: number) => {\r\n                //Tests if the result is a file and not a folder\r\n                if (object['FileSystemObjectType'] == '0') {\r\n                  var spListItem: ISPListItem = {\r\n                    'ID': object[\"ID\"],\r\n                    'Title': object['Title'],\r\n                    'Description': object['Description'],\r\n                    'EventDate': object['EventDate'],\r\n                    'EndDate': object['EndDate'],\r\n                    'Location': object['Location']\r\n                  };\r\n                  formatedResponse.value.push(spListItem);\r\n                }\r\n              });\r\n              return formatedResponse;\r\n          });\r\n      }) as Promise<ISPListItems>;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * Gets the pictures list from the mock. This function will return a\r\n   * different list of pics for the lib 1 & 2, and an empty list for the third.\r\n   */\r\n  private getItemsFromMock(libId: string): Promise<ISPListItems> {\r\n       return MockHttpClient.getListsItems(this.context.pageContext.web.absoluteUrl).then(() => {\r\n          var listData: ISPListItems = { value: []};\r\n          if (libId == '1') {\r\n            listData = {\r\n                value:\r\n                [\r\n                    {\r\n                      \"ID\": \"1\", \"Title\": \"Barton Dam, Ann Arbor, Michigan\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"2\", \"Title\": \"Building Atlanta, Georgia\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"3\", \"Title\": \"Nice day for a swim\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"4\", \"Title\": \"The plants that never die\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"5\", \"Title\": \"Downtown Atlanta, Georgia\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"6\", \"Title\": \"Atlanta traffic\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"7\", \"Title\": \"A pathetic dog\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"8\", \"Title\": \"Two happy dogs\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"9\", \"Title\": \"Antigua, Guatemala\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"10\", \"Title\": \"Iximche, Guatemala\", \"Description\": \"\"\r\n                    }\r\n                ]\r\n            };\r\n          }\r\n          else if (libId == '2') {\r\n            listData = {\r\n                value:\r\n                [\r\n                    {\r\n                      \"ID\": \"11\", \"Title\": \"Barton Dam, Ann Arbor, Michigan\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"12\", \"Title\": \"Building Atlanta, Georgia\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"13\", \"Title\": \"Nice day for a swim\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"14\", \"Title\": \"The plants that never die\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"15\", \"Title\": \"Downtown Atlanta, Georgia\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"16\", \"Title\": \"Atlanta traffic\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"17\", \"Title\": \"A pathetic dog\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"18\", \"Title\": \"Two happy dogs\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"19\", \"Title\": \"Antigua, Guatemala\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"20\", \"Title\": \"Iximche, Guatemala\", \"Description\": \"\"\r\n                    }\r\n                ]\r\n            };\r\n          }\r\n\r\n          return listData;\r\n      }) as Promise<ISPListItems>;\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}