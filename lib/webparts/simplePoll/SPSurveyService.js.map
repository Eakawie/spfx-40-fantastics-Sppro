{"version":3,"sources":["webparts/simplePoll/SPSurveyService.ts"],"names":[],"mappings":"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","file":"webparts/simplePoll/SPSurveyService.js","sourcesContent":["/**\r\n * @file\r\n * Service to get list & list items from current SharePoint site\r\n *\r\n * Author: Olivier Carpentier\r\n */\r\nimport { ISPListItems, ISPListItem } from './ISPList';\r\nimport { IWebPartContext } from '@microsoft/sp-webpart-base';\r\nimport { ISimplePollWebPartProps } from './ISimplePollWebPartProps';\r\nimport { Environment, EnvironmentType } from '@microsoft/sp-core-library';\r\nimport { SPHttpClient, SPHttpClientResponse, ISPHttpClientOptions } from '@microsoft/sp-http';\r\n\r\nimport MockHttpClient from './MockHttpClient';\r\n\r\n/**\r\n * @interface\r\n * Service interface definition\r\n */\r\nexport interface ISPSurveyService {\r\n  /**\r\n   * @function\r\n   * Gets the question from a SharePoint list\r\n   */\r\n  getQuestions(libId: string): Promise<ISPListItems>;\r\n  getResults(surveyListId: string, question: string, choices: string[]): Promise<number[]>;\r\n  postVote(surveyListId: string, question: string, choice: string): Promise<boolean>;\r\n}\r\n\r\n/**\r\n * @class\r\n * Service implementation to get list & list items from current SharePoint site\r\n */\r\nexport class SPSurveyService implements ISPSurveyService {\r\n  private context: IWebPartContext;\r\n  private props: ISimplePollWebPartProps;\r\n\r\n  /**\r\n   * @function\r\n   * Service constructor\r\n   */\r\n  constructor(_props: ISimplePollWebPartProps, pageContext: IWebPartContext){\r\n      this.props = _props;\r\n      this.context = pageContext;\r\n  }\r\n\r\n  public getResults(surveyListId: string, question: string, choices: string[]): Promise<number[]> {\r\n      var restUrl: string = this.context.pageContext.web.absoluteUrl;\r\n      restUrl += \"/_api/Web/Lists(guid'\";\r\n      restUrl += surveyListId;\r\n      restUrl += \"')/items?$select=\" + question + \"&$top=9999\";\r\n\r\n      return this.context.spHttpClient.get(restUrl, SPHttpClient.configurations.v1).then((response: SPHttpClientResponse) => {\r\n          return response.json().then((responseFormated: any) => {\r\n\r\n            var res: number[] = [];\r\n            for (var c = 0; c < choices.length; c++)\r\n              res[c] = 0;\r\n\r\n            var collection = responseFormated.value;\r\n            for (var i = 0; i < collection.length; i++) {\r\n              var vote = collection[i][question];\r\n              var qIndex = choices.indexOf(vote);\r\n              res[qIndex]++;\r\n            }\r\n\r\n            return res;\r\n        });\r\n      }) as Promise<number[]>;\r\n  }\r\n\r\n  public postVote(surveyListId: string, question: string, choice: string): Promise<boolean> {\r\n\r\n    return this.getListName(surveyListId).then((listName: string) => {\r\n\r\n      var restUrl: string = this.context.pageContext.web.absoluteUrl;\r\n      restUrl += \"/_api/Web/Lists(guid'\";\r\n      restUrl += surveyListId;\r\n      restUrl += \"')/items\";\r\n\r\n      var item = {\r\n          \"__metadata\": { \"type\": this.getItemTypeForListName(listName) },\r\n          \"Title\": \"newItemTitle\"\r\n      };\r\n      item[question] = choice;\r\n\r\n      var options: ISPHttpClientOptions = {\r\n        headers: {\r\n          \"odata-version\": \"3.0\",\r\n          \"Accept\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(item),\r\n        webUrl: this.context.pageContext.web.absoluteUrl\r\n      };\r\n      return this.context.spHttpClient.post(restUrl, SPHttpClient.configurations.v1, options).then((response: SPHttpClientResponse) => {\r\n        return response.json().then((responseFormated: any) => {\r\n          return true;\r\n        });\r\n      }) as Promise<boolean>;\r\n\r\n    }) as Promise<boolean>;\r\n  }\r\n\r\n  private getListName(listId: string): Promise<string> {\r\n    var restUrl: string = this.context.pageContext.web.absoluteUrl;\r\n    restUrl += \"/_api/Web/Lists(guid'\";\r\n    restUrl += listId;\r\n    restUrl += \"')?$select=Title\";\r\n    var options: ISPHttpClientOptions = {\r\n      headers: {\r\n        \"odata-version\": \"3.0\",\r\n        \"Accept\": \"application/json\"\r\n      }\r\n    };\r\n    return this.context.spHttpClient.get(restUrl, SPHttpClient.configurations.v1, options).then((response: SPHttpClientResponse) => {\r\n        return response.text().then((responseFormated: string) => {\r\n            var iTitle = responseFormated.indexOf(\"<d:Title>\");\r\n            var newStr = responseFormated.slice(iTitle + 9, responseFormated.length);\r\n            newStr = newStr.slice(0, newStr.indexOf(\"</d:Title>\"));\r\n            return newStr;\r\n        });\r\n    });\r\n  }\r\n\r\n  private getItemTypeForListName(name: string): string {\r\n    return \"SP.Data.\" + name.charAt(0).toUpperCase() + name.split(\" \").join(\"\").slice(1) + \"ListItem\";\r\n  }\r\n\r\n  public getVoteForUser(surveyListId: string, question: string, userEmail: string): Promise<ISPListItems> {\r\n\r\n    var restUrl: string = this.context.pageContext.web.absoluteUrl;\r\n    restUrl += \"/_api/Web/Lists(guid'\";\r\n    restUrl += surveyListId;\r\n    restUrl += \"')/items?$expand=Author&$select=\" + question + \",Author/EMail&$top=999\";\r\n\r\n     return this.context.spHttpClient.get(restUrl, SPHttpClient.configurations.v1).then((response: SPHttpClientResponse) => {\r\n          return response.json().then((responseFormated: any) => {\r\n              var formatedResponse: ISPListItems = { value: []};\r\n              //Fetchs the Json response to construct the final items list\r\n              responseFormated.value.map((object: any, i: number) => {\r\n\r\n                var authorEmail = object['Author'].EMail;\r\n                if (authorEmail == userEmail) {\r\n                  var spListItem: ISPListItem = {\r\n                      'ID': '',\r\n                      'Title': object[question]\r\n                  };\r\n                  formatedResponse.value.push(spListItem);\r\n                }\r\n              });\r\n              return formatedResponse;\r\n          });\r\n      }) as Promise<ISPListItems>;\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * Gets the survey questions from a SharePoint list\r\n   */\r\n  public getQuestions(surveyListId: string): Promise<ISPListItems> {\r\n    if (Environment.type === EnvironmentType.Local) {\r\n      //If the running environment is local, load the data from the mock\r\n      return this.getItemsFromMock('1');\r\n    }\r\n    else {\r\n      //Request the SharePoint web service\r\n      var restUrl: string = this.context.pageContext.web.absoluteUrl;\r\n      restUrl += \"/_api/Web/Lists(guid'\";\r\n      restUrl += surveyListId;\r\n      restUrl += \"')/fields?$filter=(CanBeDeleted%20eq%20true)&$top=1\";\r\n\r\n      return this.context.spHttpClient.get(restUrl, SPHttpClient.configurations.v1).then((response: SPHttpClientResponse) => {\r\n          return response.json().then((responseFormated: any) => {\r\n              var formatedResponse: ISPListItems = { value: []};\r\n              //Fetchs the Json response to construct the final items list\r\n              responseFormated.value.map((object: any, i: number) => {\r\n                //Tests if the result is a file and not a folder\r\n                var spListItem: ISPListItem = {\r\n                    'ID': object[\"ID\"],\r\n                    'Title': object['Title'],\r\n                    'StaticName': object['StaticName'],\r\n                    'TypeAsString': object['TypeAsString'],\r\n                    'Choices': object['Choices']\r\n                };\r\n                formatedResponse.value.push(spListItem);\r\n              });\r\n              return formatedResponse;\r\n          });\r\n      }) as Promise<ISPListItems>;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * Gets the pictures list from the mock. This function will return a\r\n   * different list of pics for the lib 1 & 2, and an empty list for the third.\r\n   */\r\n  private getItemsFromMock(libId: string): Promise<ISPListItems> {\r\n       return MockHttpClient.getListsItems(this.context.pageContext.web.absoluteUrl).then(() => {\r\n          var listData: ISPListItems = { value: []};\r\n          if (libId == '1') {\r\n            listData = {\r\n                value:\r\n                [\r\n                    {\r\n                      \"ID\": \"1\", \"Title\": \"Barton Dam, Ann Arbor, Michigan\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"2\", \"Title\": \"Building Atlanta, Georgia\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"3\", \"Title\": \"Nice day for a swim\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"4\", \"Title\": \"The plants that never die\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"5\", \"Title\": \"Downtown Atlanta, Georgia\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"6\", \"Title\": \"Atlanta traffic\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"7\", \"Title\": \"A pathetic dog\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"8\", \"Title\": \"Two happy dogs\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"9\", \"Title\": \"Antigua, Guatemala\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"10\", \"Title\": \"Iximche, Guatemala\", \"Description\": \"\"\r\n                    }\r\n                ]\r\n            };\r\n          }\r\n          else if (libId == '2') {\r\n            listData = {\r\n                value:\r\n                [\r\n                    {\r\n                      \"ID\": \"11\", \"Title\": \"Barton Dam, Ann Arbor, Michigan\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"12\", \"Title\": \"Building Atlanta, Georgia\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"13\", \"Title\": \"Nice day for a swim\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"14\", \"Title\": \"The plants that never die\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"15\", \"Title\": \"Downtown Atlanta, Georgia\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"16\", \"Title\": \"Atlanta traffic\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"17\", \"Title\": \"A pathetic dog\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"18\", \"Title\": \"Two happy dogs\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"19\", \"Title\": \"Antigua, Guatemala\", \"Description\": \"\"\r\n                    },\r\n                    {\r\n                      \"ID\": \"20\", \"Title\": \"Iximche, Guatemala\", \"Description\": \"\"\r\n                    }\r\n                ]\r\n            };\r\n          }\r\n\r\n          return listData;\r\n      }) as Promise<ISPListItems>;\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}