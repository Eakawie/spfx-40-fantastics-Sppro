{"version":3,"sources":["webparts/photopile/components/PhotopileWebPart.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;;;;;;GAOG;AACH,6BAA+B;AAC/B,8DAA0E;AAG1E,mCAAqC;AACrC,gFAAqD;AACrD,kEAAiE;AAGjE,wBAAwB;AACxB,kBAAgB;AAChB,oBAAkB;AAClB,2CAA6C;AAE7C,oBAAoB;AACpB,OAAO,CAAC,uCAAuC,CAAC,CAAC;AAWjD;;;GAGG;AACH;IAA8C,oCAAwD;IAKpG;;;OAGG;IACH,0BAAY,KAA6B,EAAE,OAAwB;QAAnE,YACE,kBAAM,KAAK,EAAE,OAAO,CAAC,SAQvB;QAPE,kBAAkB;QAClB,KAAI,CAAC,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC;QACnC,0BAA0B;QAC1B,KAAI,CAAC,KAAK,GAAG;YACd,OAAO,EAAE,EAAE;YACR,MAAM,EAAE,KAAK;SAChB,CAAC;;IACH,CAAC;IAAA,CAAC;IAED;;;OAGG;IACI,iCAAM,GAAb;QAEE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,CAAC;YAC7D,+BAA+B;YAC/B,MAAM,CAAC,CACL,6BAAK,SAAS,EAAC,eAAe;gBAC5B,6BAAK,SAAS,EAAC,uBAAuB;oBACpC,6BAAK,SAAS,EAAC,oBAAoB;wBACjC,2BAAG,SAAS,EAAC,uBAAuB,GAAK,CACrC;oBACN,6BAAK,SAAS,EAAC,oBAAoB,IAChC,OAAO,CAAC,eAAe,CACpB,CACF,CACF,CACP,CAAC;QACJ,CAAC;QACD,IAAI,CAAC,CAAC;YACJ,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,CAAC,CAAC;gBAC/B,uEAAuE;gBACvE,MAAM,CAAC,CACL,6BAAK,SAAS,EAAG,sCAAM,CAAC,gBAAgB;oBACtC,6BAAK,SAAS,EAAG,sCAAM,CAAC,kBAAkB;wBACxC,oBAAC,iBAAO,IAAC,IAAI,EAAG,qBAAW,CAAC,MAAM,GAAK;wBACvC,6BAAK,SAAS,EAAG,sCAAM,CAAC,YAAY;4BAClC,+BAAO,SAAS,EAAC,UAAU;;gCAAG,OAAO,CAAC,OAAO,CAAS,CAClD,CACF,CACF,CACP,CAAC;YACJ,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;gBACxC,0BAA0B;gBAC1B,MAAM,CAAC,CACL,6BAAK,SAAS,EAAC,oCAAoC;oBACjD,6BAAK,SAAS,EAAC,uBAAuB;wBACpC,6BAAK,SAAS,EAAC,oBAAoB;4BACjC,2BAAG,SAAS,EAAC,6BAA6B,GAAK,CAC3C;wBACN,6BAAK,SAAS,EAAC,oBAAoB,IAChC,OAAO,CAAC,YAAY,CACjB,CACF,CACF,CACP,CAAC;YACJ,CAAC;YACD,IAAI,CAAC,CAAC;gBACJ,wBAAwB;gBACxB,MAAM,CAAC,CACH,6BAAK,SAAS,EAAC,mBAAmB;oBAC9B,4BAAI,SAAS,EAAC,WAAW,IACpB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,MAAkB,EAAE,CAAQ;wBACjD,iEAAiE;wBACjE,IAAI,OAAO,GAAW,MAAM,CAAC,KAAK,CAAC;wBACnC,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,IAAI,OAAO,IAAI,EAAE,CAAC;4BACnC,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC;wBAC/B,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,IAAI,OAAO,IAAI,EAAE,CAAC;4BACnC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;wBAC7B,iBAAiB;wBACjB,MAAM,CAAC,CACL,4BAAI,GAAG,EAAE,CAAC;4BACR,2BAAG,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,iBAAiB;gCACpC,6BAAK,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,kBAAkB,EAAE,GAAG,EAAE,OAAO,EAAG,KAAK,EAAC,KAAK,EAAC,MAAM,EAAC,KAAK,GAAE,CACjF,CACD,CACN,CAAC;oBACN,CAAC,CAAC,CACD,CACH,CACT,CAAC;YACJ,CAAC;QACH,CAAC;IACH,CAAC;IAGD;;;OAGG;IACI,4CAAiB,GAAxB;QAAA,iBAWC;QAVC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,CAAC;YAC7D,+BAA+B;YAC/B,IAAM,mBAAmB,GAA0B,IAAI,6CAAqB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;YAC7G,gDAAgD;YAChD,mBAAmB,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;iBACjD,IAAI,CAAC,UAAC,QAAQ;gBACb,iDAAiD;gBACjD,KAAI,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,QAAQ,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC;QACP,CAAC;IACH,CAAC;IAED;;;OAGG;IACG,oDAAyB,GAAhC,UAAiC,SAAiC;QAAlE,iBAaC;QAZE,qCAAqC;QACrC,IAAI,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,KAAK,EAAC,CAAC,CAAC;QAC7C,EAAE,CAAC,CAAC,SAAS,CAAC,QAAQ,IAAI,IAAI,IAAI,SAAS,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,CAAC;YAC3D,+BAA+B;YAC/B,IAAM,mBAAmB,GAA0B,IAAI,6CAAqB,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;YAC5G,gDAAgD;YAChD,mBAAmB,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC;iBAChD,IAAI,CAAC,UAAC,QAAQ;gBACb,iDAAiD;gBACjD,KAAI,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,QAAQ,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC;QACP,CAAC;IACJ,CAAC;IAEA;;;OAGG;IACI,6CAAkB,GAAzB,UAA0B,SAAiC,EAAE,SAA0B;QAErF,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YACtB,wBAAwB;YACxB,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAC7C,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YACnD,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YACrD,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YAC3D,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YAC3D,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YAC3D,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAC7C,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YACnD,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YACvD,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YACjD,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YACjD,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YAC3D,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAC3C,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;YACzD,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAErD,gBAAgB;YAChB,SAAS,CAAC,OAAO,EAAE,CAAC;QACtB,CAAC;IACH,CAAC;IAEH,uBAAC;AAAD,CApKA,AAoKC,CApK6C,KAAK,CAAC,SAAS,GAoK5D","file":"webparts/photopile/components/PhotopileWebPart.js","sourcesContent":["/**\r\n * @file\r\n * Photopile Web Part React JSX component.\r\n *\r\n * Contains JSX code to render the web part with HTML templates.\r\n *\r\n * Author: Olivier Carpentier\r\n */\r\nimport * as React from 'react';\r\nimport { Spinner, SpinnerType } from 'office-ui-fabric-react/lib/Spinner';\r\nimport { IPhotopileWebPartProps } from '../IPhotopileWebPartProps';\r\nimport { IWebPartContext } from '@microsoft/sp-webpart-base';\r\nimport * as strings from 'mystrings';\r\nimport styles from '../PhotopileWebPart.module.scss';\r\nimport { SPPicturesListService } from '../SPPicturesListService';\r\nimport { ISPListItem } from '../ISPList';\r\n\r\n//Loads external JS libs\r\nimport 'jquery';\r\nimport 'jqueryui';\r\nimport * as photopile from 'photopileModule';\r\n\r\n//Loads external CSS\r\nrequire('../../../css/photopile/photopile.scss');\r\n\r\n/**\r\n * @interface\r\n * Defines Photopile web part state.\r\n */\r\nexport interface IPhotopileState {\r\n\tresults?: ISPListItem[];\r\n  loaded: boolean;\r\n}\r\n\r\n/**\r\n * @class\r\n * Defines Photopile web part class.\r\n */\r\nexport default class PhotopileWebPart extends React.Component<IPhotopileWebPartProps, IPhotopileState> {\r\n\r\n  //page context\r\n  private myPageContext: IWebPartContext;\r\n\r\n  /**\r\n   * @function\r\n   * Photopile web part contructor.\r\n   */\r\n  constructor(props: IPhotopileWebPartProps, context: IWebPartContext) {\r\n    super(props, context);\r\n    //Save the context\r\n    this.myPageContext = props.context;\r\n    //Init the component state\r\n   \tthis.state = {\r\n\t\t\tresults: [],\r\n      loaded: false\r\n\t\t};\r\n\t};\r\n\r\n  /**\r\n   * @function\r\n   * JSX Element render method\r\n   */\r\n  public render(): JSX.Element {\r\n\r\n    if (this.props.listName == null || this.props.listName == '') {\r\n      //Display select a list message\r\n      return (\r\n        <div className=\"ms-MessageBar\">\r\n          <div className=\"ms-MessageBar-content\">\r\n            <div className=\"ms-MessageBar-icon\">\r\n              <i className=\"ms-Icon ms-Icon--Info\"></i>\r\n            </div>\r\n            <div className=\"ms-MessageBar-text\">\r\n              {strings.ErrorSelectList}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    else {\r\n      if (this.state.loaded == false) {\r\n        //Display the loading spinner with the Office UI Fabric Spinner control\r\n        return (\r\n          <div className={ styles.photopileWebPart }>\r\n            <div className={ styles.workingOnItSpinner }>\r\n              <Spinner type={ SpinnerType.normal } />\r\n              <div className={ styles.loadingLabel }>\r\n                <label className=\"ms-Label\"> {strings.Loading}</label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n      else if (this.state.results.length == 0) {\r\n        //Display message no items\r\n        return (\r\n          <div className=\"ms-MessageBar ms-MessageBar--error\">\r\n            <div className=\"ms-MessageBar-content\">\r\n              <div className=\"ms-MessageBar-icon\">\r\n                <i className=\"ms-Icon ms-Icon--ErrorBadge\"></i>\r\n              </div>\r\n              <div className=\"ms-MessageBar-text\">\r\n                {strings.ErrorNoItems}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n      else {\r\n        //Display the items list\r\n        return (\r\n            <div className='photopile-wrapper'>\r\n                <ul className='photopile'>\r\n                    {this.state.results.map((object:ISPListItem, i:number) => {\r\n                        //Select the best Alt text with title, description or file's name\r\n                        var altText: string = object.Title;\r\n                        if (altText == null || altText == '')\r\n                          altText = object.Description;\r\n                        if (altText == null || altText == '')\r\n                          altText = object.File.Name;\r\n                        //Render the item\r\n                        return (\r\n                          <li key={i}>\r\n                            <a href={object.File.ServerRelativeUrl}>\r\n                              <img src={object.File.ThumbnailServerUrl} alt={altText}  width=\"133\" height=\"100\"/>\r\n                            </a>\r\n                          </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * @function\r\n   * Function called when the component did mount\r\n   */\r\n  public componentDidMount(): void {\r\n    if (this.props.listName != null && this.props.listName != '') {\r\n      //Init the Picture list service\r\n      const picturesListService: SPPicturesListService = new SPPicturesListService(this.props, this.myPageContext);\r\n      //Load the list of pictures from the current lib\r\n      picturesListService.getPictures(this.props.listName)\r\n        .then((response) => {\r\n          //Modify the component state with the json result\r\n          this.setState({ results: response.value, loaded: true});\r\n        });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * Function called when the web part properties has changed\r\n   */\r\n\tpublic componentWillReceiveProps(nextProps: IPhotopileWebPartProps): void {\r\n    //Define the state with empty results\r\n    this.setState({ results: [], loaded: false});\r\n    if (nextProps.listName != null && nextProps.listName != '') {\r\n      //Init the Picture list service\r\n      const picturesListService: SPPicturesListService = new SPPicturesListService(nextProps, this.myPageContext);\r\n      //Load the list of pictures from the current lib\r\n      picturesListService.getPictures(nextProps.listName)\r\n        .then((response) => {\r\n          //Modify the component state with the json result\r\n          this.setState({ results: response.value, loaded: true});\r\n        });\r\n    }\r\n\t}\r\n\r\n  /**\r\n   * @function\r\n   * Function called when the component has been rendered (ie HTML code is ready)\r\n   */\r\n  public componentDidUpdate(prevProps: IPhotopileWebPartProps, prevState: IPhotopileState): void {\r\n\r\n    if (this.state.loaded) {\r\n      //Init photopile options\r\n      photopile.setNumLayers(this.props.numLayers);\r\n      photopile.setThumbOverlap(this.props.thumbOverlap);\r\n      photopile.setThumbRotation(this.props.thumbRotation);\r\n      photopile.setThumbBorderWidth(this.props.thumbBorderWidth);\r\n      photopile.setThumbBorderColor(this.props.thumbBorderColor);\r\n      photopile.setThumbBorderHover(this.props.thumbBorderHover);\r\n      photopile.setDraggable(this.props.draggable);\r\n      photopile.setFadeDuration(this.props.fadeDuration);\r\n      photopile.setPickupDuration(this.props.pickupDuration);\r\n      photopile.setPhotoZIndex(this.props.photoZIndex);\r\n      photopile.setPhotoBorder(this.props.photoBorder);\r\n      photopile.setPhotoBorderColor(this.props.photoBorderColor);\r\n      photopile.setShowInfo(this.props.showInfo);\r\n      photopile.setAutoplayGallery(this.props.autoplayGallery);\r\n      photopile.setAutoplaySpeed(this.props.autoplaySpeed);\r\n\r\n      //Init photopile\r\n      photopile.scatter();\r\n    }\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}